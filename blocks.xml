<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<palette>
	<block tag="openfl-display-imports" spec="using display objects" code="import openfl.display.*;" type="action" color="gray" returns="void" />
	<block tag="openfl-filters-imports" spec="using filters" code="import openfl.filters.*;" type="action" color="gray" returns="void" />
	<block tag="openfl-text-imports" spec="using textfield" code="import openfl.text.*;" type="action" color="gray" returns="void" />
	
	<block tag="openfl-display-new-layer" spec="create openfl display layer with name : %0" code="openfl.display.Blocks.createDisplayLayer(~)" type="normal" color="red" returns="displayobjectcontainer">
		<fields>
			<text order="0" />
		</fields>
	</block>
	<block tag="openfl-display-add-layer" spec="add openfl display layer %0 to screen at z-index %1" code="openfl.display.Blocks.addDisplayLayer(~, ~);" type="action" color="red" returns="void">
		<fields>
			<displayobjectcontainer order="0" />
			<int order="1" />
		</fields>
	</block>
	<block tag="openfl-display-new-container" spec="create openfl display container" code="new Sprite()" type="normal" color="cyan" returns="displayobjectcontainer" />
	<block tag="openfl-display-get-layer" spec="layer with name : %0" code="engine.getLayerByName(~)" type="normal" color="red" returns="displayobjectcontainer">
		<fields>
			<text order="0" />
		</fields>
	</block>
	<block tag="openfl-display-set-stage-focus" spec="set stage focus to %0" code="Engine.stage.focus = ~;" type="action" color="green" returns="void">
		<fields>
			<displayobject order="0" />
		</fields>
	</block>
	<block tag="openfl-display-get-stage-focus" spec="get stage focus" code="Engine.stage.focus" type="normal" color="green" returns="displayobject" />
	
	<block tag="displayobjc-addChild" spec="add %0 to %1" code="#1.addChild(#0);" type="action" color="cyan" returns="void">
		<fields>
			<displayobject order="0" />
			<displayobjectcontainer order="1" />
		</fields>
	</block>
	<block tag="displayobjc-removeChild" spec="remove %0 from %1" code="#1.removeChild(#0);" type="action" color="cyan" returns="void">
		<fields>
			<displayobject order="0" />
			<displayobjectcontainer order="1" />
		</fields>
	</block>
	
	<dropdown id="pos-dd">
		<choices>
			<c text="x" code="x" />
			<c text="y" code="y" />
			<c text="width" code="width" />
			<c text="height" code="height" />
		</choices>
	</dropdown>
	<block tag="displayobj-get-pos-dd" spec="get %1 for %0" code="~.~" type="normal" color="blue" returns="number">
		<fields>
			<displayobject order="0"/>
			<dropdown order="1" id="pos-dd" />
		</fields>
	</block>
	<block tag="displayobj-set-pos-dd" spec="set %1 for %0 to %2" code="~.~ = ~;" type="action" color="blue" returns="void">
		<fields>
			<displayobject order="0"/>
			<dropdown order="1" id="pos-dd" />
			<number order="2"/>
		</fields>
	</block>
	<block tag="displayobj-get-alpha" spec="get alpha for %0" code="~.alpha" type="normal" color="blue" returns="number">
		<fields>
			<displayobject order="0"/>
		</fields>
	</block>
	<block tag="displayobj-set-alpha" spec="set alpha for %0 to %1" code="~.alpha = ~;" type="action" color="blue" returns="void">
		<fields>
			<displayobject order="0"/>
			<number order="1"/>
		</fields>
	</block>
	<block tag="displayobj-add-filter" spec="add %1 to %0 filters" code="#0.filters = #0.filters.concat([#1]);" type="action" color="blue" returns="void">
		<fields>
			<displayobject order="0"/>
			<filter order="1"/>
		</fields>
	</block>
	<block tag="displayobj-clear-filters" spec="clear %0 filters" code="~.filters = null;" type="action" color="blue" returns="void">
		<fields>
			<displayobject order="0"/>
		</fields>
	</block>
	<block tag="filters-built-dropshadow" spec="dropshadow" code="dropshadow" type="normal" color="blue" returns="filter" hidden="true">
		<fields/>
	</block>
	<block tag="filters-build-dropshadow" spec="build %1 filter" code="{var dropshadow = new DropShadowFilter();#0}" type="wrapper" color="yellow" returns="void">
		<fields>
			<code-block order="0"/>
			<attached-block order="1" tag="filters-built-dropshadow"/>
		</fields>
	</block>
	<block tag="filters-set-dropshadow-number" spec="set %1 for %0 to %2" code="~.~ = ~;" type="action" color="blue" returns="void">
		<fields>
			<filter order="0"/>
			<dropdown order="1">
				<choices>
					<c text="alpha" code="alpha" />
					<c text="angle" code="angle" />
					<c text="x blur" code="blurX" />
					<c text="y blur" code="blurY" />
					<c text="distance" code="distance" />
					<c text="strength" code="strength" />
				</choices>
			</dropdown>
			<number order="2"/>
		</fields>
	</block>
	<block tag="filters-set-dropshadow-color" spec="set color for %0 to %1" code="~.color = ~;" type="action" color="blue" returns="void">
		<fields>
			<filter order="0"/>
			<color order="1"/>
		</fields>
	</block>
	<block tag="filters-set-dropshadow-bool" spec="set %1 for %0 to %2" code="~.~ = ~;" type="action" color="blue" returns="void">
		<fields>
			<filter order="0"/>
			<dropdown order="1">
				<choices>
					<c text="hides object" code="hideObject" />
					<c text="inner" code="inner" />
					<c text="knockout" code="knockout" />
				</choices>
			</dropdown>
			<bool order="2"/>
		</fields>
	</block>
	<block tag="filters-built-glow" spec="glow" code="glow" type="normal" color="blue" returns="filter" hidden="true">
		<fields/>
	</block>
	<block tag="filters-build-glow" spec="build %1 filter" code="{var glow = new GlowFilter();#0}" type="wrapper" color="yellow" returns="void">
		<fields>
			<code-block order="0"/>
			<attached-block order="1" tag="filters-built-glow"/>
		</fields>
	</block>
	<block tag="filters-set-glow-number" spec="set %1 for %0 to %2" code="~.~ = ~;" type="action" color="blue" returns="void">
		<fields>
			<filter order="0"/>
			<dropdown order="1">
				<choices>
					<c text="alpha" code="alpha" />
					<c text="x blur" code="blurX" />
					<c text="y blur" code="blurY" />
					<c text="strength" code="strength" />
				</choices>
			</dropdown>
			<number order="2"/>
		</fields>
	</block>
	<block tag="filters-set-glow-color" spec="set color for %0 to %1" code="~.color = ~;" type="action" color="blue" returns="void">
		<fields>
			<filter order="0"/>
			<color order="1"/>
		</fields>
	</block>
	<block tag="filters-set-glow-bool" spec="set %1 for %0 to %2" code="~.~ = ~;" type="action" color="blue" returns="void">
		<fields>
			<filter order="0"/>
			<dropdown order="1">
				<choices>
					<c text="inner" code="inner" />
					<c text="knockout" code="knockout" />
				</choices>
			</dropdown>
			<bool order="2"/>
		</fields>
	</block>
	
	<!-- openfl.text blocks -->
	
	<block tag="tf-new" spec="new textfield" code="new TextField()" type="normal" color="green" returns="textfield" />
	<dropdown id="bgborder-dd">
		<choices>
			<c text="background" code="background"/>
			<c text="border" code="border"/>
		</choices>
	</dropdown>
	<block tag="tf-get-bgborder-dd" spec="%1 enabled for %0" code="~.~" type="normal" color="green" returns="boolean">
		<fields>
			<textfield order="0"/>
			<dropdown order="1" id="bgborder-dd" />
		</fields>
	</block>
	<block tag="tf-set-bgborder-dd" spec="set %1 enabled for %0 to %2" code="~.~ = ~;" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<dropdown order="1" id="bgborder-dd" />
			<boolean order="2"/>
		</fields>
	</block>
	<block tag="tf-get-bgborderColor-dd" spec="%1 color for %0" code="~.~Color" type="normal" color="green" returns="color">
		<fields>
			<textfield order="0"/>
			<dropdown order="1" id="bgborder-dd" />
		</fields>
	</block>
	<block tag="tf-set-bgborderColor-dd" spec="set %1 color for %0 to %2" code="~.~Color = ~;" type="action" color="green" returns="color">
		<fields>
			<textfield order="0"/>
			<dropdown order="1" id="bgborder-dd" />
			<color order="2"/>
		</fields>
	</block>
	<block tag="tf-get-displayAsPassword" spec="%0 displays as password" code="~.displayAsPassword" type="normal" color="green" returns="boolean">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-set-displayAsPassword" spec="set %0 displays as password to %1" code="~.displayAsPassword = ~;" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<boolean order="1"/>
		</fields>
	</block>
	<block tag="tf-get-embedFonts" spec="%0 uses embedded fonts" code="~.embedFonts" type="normal" color="green" returns="boolean">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-set-embedFonts" spec="set %0 uses embedded fonts to %1" code="~.embedFonts = ~;" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<boolean order="1"/>
		</fields>
	</block>
	<block tag="tf-get-defaultTextFormat" spec="default text format for %0" code="~.defaultTextFormat" type="normal" color="green" returns="textformat">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-set-defaultTextFormat" spec="set default text format for %0 to %1" code="~.defaultTextFormat = ~;" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<textformat order="1"/>
		</fields>
	</block>
	<block tag="tf-get-textColor" spec="text color for %0" code="~.textColor" type="normal" color="green" returns="color">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-set-textColor" spec="set text color for %0 to %1" code="~.textColor = ~;" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<color order="1"/>
		</fields>
	</block>
	<block tag="tf-getTextFormat" spec="get format of text in range [ %1 to %2 ] in %0" code="~.getTextFormat(~, ~)" type="normal" color="green" returns="textformat">
		<fields>
			<textfield order="0"/>
			<int order="1"/>
			<int order="2"/>
		</fields>
	</block>
	<block tag="tf-setTextFormat" spec="set format of text in range [ %2 to %3 ] in %0 to %1" code="~.setTextFormat(~, ~, ~);" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<textformat order="1"/>
			<int order="2"/>
			<int order="3"/>
		</fields>
	</block>
	<block tag="tf-set-antiAliasType-dd" spec="set anti-aliasing type for %0 to %1" code="~.antiAliasType = ~;" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<dropdown order="1">
				<choices>
					<c text="normal" code="AntiAliasType.NORMAL"/>
					<c text="advanced" code="AntiAliasType.ADVANCED"/>
				</choices>
			</dropdown>
		</fields>
	</block>
	<block tag="tf-set-gridFitType-dd" spec="set grid fitting type for %0 to %1" code="~.gridFitType = ~;" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<dropdown order="1">
				<choices>
					<c text="none" code="GridFitType.NONE" />
					<c text="pixel" code="GridFitType.PIXEL" />
					<c text="subpixel" code="GridFitType.SUBPIXEL" />
				</choices>
			</dropdown>
		</fields>
	</block>
	<block tag="tf-get-sharpness" spec="text sharpness for %0" code="~.sharpness" type="normal" color="green" returns="number">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-set-sharpness" spec="set text sharpness for %0 to %1" code="~.sharpness = ~;" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<number order="1"/>
		</fields>
	</block>
	<block tag="tf-set-autoSize-dd" spec="set automatic sizing and alignment for %0 to %1" code="~.autoSize = ~;" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<dropdown order="1">
				<choices>
					<c text="center" code="TextFieldAutoSize.CENTER" />
					<c text="left" code="TextFieldAutoSize.LEFT" />
					<c text="none" code="TextFieldAutoSize.NONE" />
					<c text="right" code="TextFieldAutoSize.RIGHT" />
				</choices>
			</dropdown>
		</fields>
	</block>
	<block tag="tf-get-multilinewordwrap-dd" spec="%1 enabled for %0" code="~.~" type="normal" color="green" returns="boolean">
		<fields>
			<textfield order="0"/>
			<dropdown order="1">
				<choices>
					<c text="multiline" code="multiline" />
					<c text="wordwrap" code="wordWrap" />
				</choices>
			</dropdown>
		</fields>
	</block>
	<block tag="tf-set-multilinewordwrap-dd" spec="set %1 enabled for %0 to %2" code="~.~ = ~;" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<dropdown order="1">
				<choices>
					<c text="multiline" code="multiline" />
					<c text="wordwrap" code="wordWrap" />
				</choices>
			</dropdown>
			<boolean order="2"/>
		</fields>
	</block>
	<block tag="tf-get-numLines" spec="number of lines visible for %0" code="~.numLines" type="normal" color="green" returns="int">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-get-bottomScrollV" spec="line number of bottommost visible line in %0" code="~.bottomScrollV" type="normal" color="green" returns="int">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-get-maxScrollH" spec="max horizontal scrolling pos (pixels) for %0" code="~.maxScrollH" type="normal" color="green" returns="int">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-get-maxScrollV" spec="max vertical scrolling pos (lines) for %0" code="~.maxScrollV" type="normal" color="green" returns="int">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-get-scrollH" spec="horizontal scrolling pos (pixels) for %0" code="~.scrollH" type="normal" color="green" returns="int">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-set-scrollH" spec="set horizontal scrolling pos (pixels) for %0 to %1" code="~.scrollH = ~;" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<int order="1"/>
		</fields>
	</block>
	<block tag="tf-get-scrollV" spec="vertical scrolling pos (lines) for %0" code="~.scrollV" type="normal" color="green" returns="int">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-set-scrollV" spec="set vertical scrolling pos (lines) for %0 to %1" code="~.scrollV = ~;" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<int order="1"/>
		</fields>
	</block>
	<block tag="tf-get-mouseWheelEnabled" spec="mousewheel enabled for %0" code="~.mouseWheelEnabled" type="normal" color="green" returns="boolean">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-set-mouseWheelEnabled" spec="set mousewheel enabled for %0 to %1" code="~.mouseWheelEnabled = ~;" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<boolean order="1"/>
		</fields>
	</block>
	<block tag="tf-get-text-dd" spec="%1 for %0" code="~.~" type="normal" color="green" returns="text">
		<fields>
			<textfield order="0"/>
			<dropdown order="1">
				<choices>
					<c text="text" code="text" />
					<c text="html text" code="htmlText" />
				</choices>
			</dropdown>
		</fields>
	</block>
	<block tag="tf-set-text-dd" spec="set %1 for %0 to %2" code="~.~ = ~;" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<dropdown order="1">
				<choices>
					<c text="text" code="text" />
					<c text="html text" code="htmlText" />
				</choices>
			</dropdown>
			<text order="2"/>
		</fields>
	</block>
	<block tag="tf-get-length" spec="number of characters of text in %0" code="~.length" type="normal" color="green" returns="int">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-appendText" spec="append text %1 to %0" code="~.appendText(~);" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<text order="1"/>
		</fields>
	</block>
	<block tag="tf-replaceText" spec="replace text in range [ %1 to %2 ] with %3 in %0" code="~.replaceText(~, ~, ~);" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<int order="1"/>
			<int order="2"/>
			<text order="3"/>
		</fields>
	</block>
	<block tag="tf-set-type-dd" spec="set type for %0 to %1" code="~.type = ~;" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<dropdown order="1">
				<choices>
					<c text="dynamic" code="TextFieldType.DYNAMIC" />
					<c text="input" code="TextFieldType.INPUT" />
				</choices>
			</dropdown>
		</fields>
	</block>
	<block tag="tf-get-maxChars" spec="max input characters for %0" code="~.maxChars" type="normal" color="green" returns="int">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-set-maxChars" spec="set max input characters for %0 to %1" code="~.maxChars = ~;" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<int order="1"/>
		</fields>
	</block>
	<block tag="tf-get-restrict" spec="allowed input characters for %0" code="~.restrict" type="normal" color="green" returns="text">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-set-restrict" spec="set allowed input characters for %0 to %1" code="~.restrict = ~;" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<text order="1"/>
		</fields>
	</block>
	<block tag="tf-get-caretIndex" spec="index of caret in %0" code="~.caretIndex" type="normal" color="green" returns="int">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-get-selectable" spec="%0 is selectable" code="~.selectable" type="normal" color="green" returns="boolean">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-set-selectable" spec="set %0 selectable to %1" code="~.selectable = ~;" type="action" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<boolean order="1"/>
		</fields>
	</block>
	<block tag="tf-get-selectionBeginIndex" spec="index of selection start for %0" code="~.selectionBeginIndex" type="normal" color="green" returns="int">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-get-selectionEndIndex" spec="index of selection end for %0" code="~.selectionEndIndex" type="normal" color="green" returns="int">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-setSelection" spec="set selection range to [ %1 to %2 ] for %0" code="~.setSelection(~, ~);" type="normal" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<int order="1"/>
			<int order="2"/>
		</fields>
	</block>
	<block tag="tf-replaceSelectedText" spec="replace selected text in %0 with %1" code="~.replaceSelectedText(~);" type="normal" color="green" returns="void">
		<fields>
			<textfield order="0"/>
			<text order="1"/>
		</fields>
	</block>
	<block tag="tf-get-textHeight" spec="height of text for %0" code="~.textHeight" type="normal" color="green" returns="number">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tf-get-textWidth" spec="width of text for %0" code="~.textWidth" type="normal" color="green" returns="number">
		<fields>
			<textfield order="0"/>
		</fields>
	</block>
	<block tag="tfformat-new" spec="new textformat" code="new TextFormat()" type="normal" color="green" returns="textformat" />
	<block tag="tfformat-set-align-dd" spec="set alignment for %0 to %1" code="~.align = ~;" type="action" color="green" returns="void">
		<fields>
			<textformat order="0"/>
			<dropdown order="1">
				<choices>
					<c text="left" code="TextFormatAlign.LEFT" />
					<c text="center" code="TextFormatAlign.CENTER" />
					<c text="right" code="TextFormatAlign.RIGHT" />
					<c text="start" code="TextFormatAlign.START" />
					<c text="end" code="TextFormatAlign.END" />
					<c text="justify" code="TextFormatAlign.JUSTIFY" />
				</choices>
			</dropdown>
		</fields>
	</block>
	<block tag="tfformat-get-font" spec="font name for %0" code="~.font" type="normal" color="green" returns="text">
		<fields>
			<textformat order="0"/>
		</fields>
	</block>
	<block tag="tfformat-set-font" spec="set font for %0 to font with name %1" code="~.font = ~;" type="action" color="green" returns="void">
		<fields>
			<textformat order="0"/>
			<text order="1"/>
		</fields>
	</block>
	<block tag="tfformat-set-embedded-font-path" spec="set font for %0 to font embedded at %1" code="~.font = openfl.utils.Assets.getFont(&quot;assets/data/&quot; + ~).fontName;" type="action" color="green" returns="void">
		<fields>
			<textformat order="0"/>
			<text order="1"/>
		</fields>
	</block>
	<dropdown id="tfformat-styling-dd">
		<choices>
			<c text="bolding" code="bold" />
			<c text="italicizing" code="italic" />
			<c text="underlining" code="underline" />
			<c text="bulleting" code="bullet" />
			<c text="kerning" code="kerning" />
		</choices>
	</dropdown>
	<block tag="tfformat-get-styling-dd" spec="%1 enabled for %0" code="~.~" type="normal" color="green" returns="boolean">
		<fields>
			<textformat order="0"/>
			<dropdown order="1" id="tfformat-styling-dd" />
		</fields>
	</block>
	<block tag="tfformat-set-styling-dd" spec="set %1 enabled for %0 to %2" code="~.~ = ~;" type="action" color="green" returns="void">
		<fields>
			<textformat order="0"/>
			<dropdown order="1" id="tfformat-styling-dd" />
			<boolean order="2"/>
		</fields>
	</block>
	<dropdown id="tfformat-indentmargin-dd">
		<choices>
			<c text="indentation" code="indent" />
			<c text="block indentation" code="blockIndent" />
			<c text="left margin" code="leftMargin" />
			<c text="right margin" code="rightMargin" />
			<c text="font size" code="size" />
			<c text="leading" code="leading" />
		</choices>
	</dropdown>
	<block tag="tfformat-get-indentmargin-dd" spec="%1 for %0" code="~.~" type="normal" color="green" returns="int">
		<fields>
			<textformat order="0"/>
			<dropdown order="1" id="tfformat-indentmargin-dd" />
		</fields>
	</block>
	<block tag="tfformat-set-indentmargin-dd" spec="set %1 for %0 to %2" code="~.~ = ~;" type="action" color="green" returns="void">
		<fields>
			<textformat order="0"/>
			<dropdown order="1" id="tfformat-indentmargin-dd" />
			<int order="2"/>
		</fields>
	</block>
	<block tag="tf-get-color" spec="text color for %0" code="~.color" type="normal" color="green" returns="color">
		<fields>
			<textformat order="0"/>
		</fields>
	</block>
	<block tag="tf-set-color" spec="set text color for %0 to %1" code="~.color = ~;" type="action" color="green" returns="void">
		<fields>
			<textformat order="0"/>
			<color order="1"/>
		</fields>
	</block>
	<block tag="tf-get-letterSpacing" spec="letter spacing for %0" code="~.letterSpacing" type="normal" color="green" returns="number">
		<fields>
			<textformat order="0"/>
		</fields>
	</block>
	<block tag="tf-set-letterSpacing" spec="set letter spacing for %0 to %1" code="~.letterSpacing = ~;" type="action" color="green" returns="void">
		<fields>
			<textformat order="0"/>
			<number order="1"/>
		</fields>
	</block>
</palette>